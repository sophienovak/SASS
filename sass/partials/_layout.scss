@import "_variables.scss";

// represent grid - constrains min width of grid
.container {
    margin: 0 auto;
    min-width: $grid-min-width;
}

// row styles - setting overflow auto will fix collapsed height due to floating child elements
.row {
    overflow: auto;
}

// column styles to float the columns
%col {
    position: relative;
    float: left;
}

// calculates responsive width using the formula
@function get-responsive-width($target, $context) {
    @return $target / $context * 100%;
}

@mixin responsive-column($size, $breakpoint, $gutter) {
    $column-width:$breakpoint / $grid-columns;  //getting the columns
    $column-padding: get-responsive-width($gutter, $breakpoint)/2; //getting the padding for the left and right side
    
    $column-padding-selector: "%col-padding-#{$size}";  

    //reuseable padding styles (gutter) for columns
    #{$column-padding-selector}{
        padding-left:$column-padding;
        padding-right:$column-padding;
    }

    //loop through all the columns in the grid
    @for $i from 1 through $grid-columns {
        .col-#{$size}-#{$i} {
                @extend #{$column-padding-selector};
             }
        $column-span-width:$column-width * $i - $gutter; //if it spans more than one column it minuses the gutter in the middle (80 x 2 = 160 - gutter)
        
        .col-#{$size}-#{$i} {
            width:get-responsive-width($column-span-width, $breakpoint);
        }
    }
}

@mixin responsive-column-offsetting(){
    @for $i from 1 through $grid-columns{
        $column-offset: get-responsive-width($i, $grid-columns);

        .offset-#{$i}{
            margin-left:$column-offset;
        }
    }
}

//combines all mixins and functions above to create grid column styles 
@mixin grid($size, $breakpoint, $gutter, $is-default: false) {
    @for $i from 1 through $grid-columns {   
        .col-#{$size}-#{$i} {    //this will produce all sizes (.column-sm-1 , .column-sm-2 etc)
            @extend %col;
        }
    }

    @if $is-default == true {
        @include responsive-column($size, $breakpoint, $gutter);
    } @else{
          @media(min-width: $breakpoint){
              .container{
                  width:$breakpoint - $gutter;
              }

              @include responsive-column($size, $breakpoint, $gutter);
          }
      }
}



















// gets a commas separated list of all columns i.e. col-sm-1, col-sm-2, ...
//@function get-column-selectors($size) {
    //$column-selectors: "";

    // loop from 1 to 12
    // Build a concatenated string i.e. col-sm-1, col-sm-2, ...
    //@for $i from 1 through $grid-columns {
        //@if $i == 1 {
            //$column-selectors: "#{$column-selectors}.col-#{$size}-#{$i}";
        //} @else {
            //$column-selectors: "#{$column-selectors}, .col-#{$size}-#{$i}";
          //}
    //}
    //@return $column-selectors;
//}

//@mixin responsive-column-padding($size, $breakpoint, $gutter) {

//}